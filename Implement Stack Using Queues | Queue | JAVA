// Link: https://leetcode.com/problems/implement-stack-using-queues/discuss/957926/Implement-Stack-Using-Queues-or-Queue-or-JAVA

class MyStack {
    Queue<Integer> queue=null;
    Queue<Integer> temp_queue=null;

    /** Initialize your data structure here. */
    public MyStack() {
        queue=new LinkedList<Integer>();
        temp_queue=new LinkedList<Integer>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        while(queue.size()>0){
            temp_queue.add(queue.poll());
        }
        queue.add(x);
        while(temp_queue.size()>0){
            queue.add(temp_queue.poll());
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return queue.poll();
    }
    
    /** Get the top element. */
    public int top() {
        return queue.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue.size()==0;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
