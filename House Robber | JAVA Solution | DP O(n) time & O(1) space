// Link: https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/555/week-2-september-8th-september-14th/3459/discuss/846056/House-Robber-or-JAVA-Solution-or-DP-O(n)-time-and-O(1)-space

class Solution {    
    public int rob(int[] nums) {
        int len=nums.length;
        if(len==0){
            return 0;
        }
        if(len==1){
            return nums[0];
        }
        
        // Solution with O(1) space and O(n) time (using only previous 2 computations)
        
        int prev1=nums[0], prev2=Math.max(nums[0],nums[1]);
        int max=prev2;
        for(int i=2;i<len;i++){
            max=Math.max(prev1+nums[i],prev2);
            prev1=prev2;
            prev2=max;
        }
        return max;
    }
}
