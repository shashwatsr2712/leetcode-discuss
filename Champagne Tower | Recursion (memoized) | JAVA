// Link: https://leetcode.com/explore/challenge/card/october-leetcoding-challenge/562/week-4-october-22nd-october-28th/3508/discuss/910878/Champagne-Tower-or-Recursion-(memoized)-or-JAVA

class Solution {
    int poured_c;
    double memo[][]; // Store precomputed results
    
    // Returns the total champagne overflowed from glass (r,c)
    // Memoized recursion
    public double overflowed(int r,int c){
        if(memo[r][c]!=-1.0){
            return memo[r][c];
        }
        if(r==0){
            memo[r][c]=(poured_c==0) ? 0.0 : poured_c-1.0;
        } else if(c==0){
            double temp=0.5*overflowed(r-1,0);
            memo[r][c] = (temp<1) ? 0.0 : temp-1.0;
        } else if(c==r){
            double temp=0.5*overflowed(r-1,c-1);
            memo[r][c] = (temp<1) ? 0.0 : temp-1.0;
        } else{
            double temp=0.5*overflowed(r-1,c-1)+0.5*overflowed(r-1,c);
            memo[r][c] = (temp<1.0) ? 0.0 : temp-1.0;
        }
        return memo[r][c];
    }
    
    public double champagneTower(int poured, int query_row, int query_glass) {
        poured_c=poured;
        memo=new double[query_row+1][];
        for(int i=0;i<=query_row;i++){
            memo[i]=new double[i+1];
            Arrays.fill(memo[i],-1.0);
        }
        
        // For topmost glass
        if(query_row==0){
            return (poured_c==0) ? 0.0 : 1.0;
        }
        
        // For first glass of any row
        if(query_glass==0){
            return Math.min((0.5)*overflowed(query_row-1,0),1.0);
        }
        
        
        double res=0;
        res+=(0.5)*overflowed(query_row-1,query_glass-1);
        // For all middle glasses in any row
        if(query_glass!=query_row){
            res+=(0.5)*overflowed(query_row-1,query_glass);    
        }
        res=Math.min(res,1.0);
        return res;
    }
}
