// Link: https://leetcode.com/explore/challenge/card/february-leetcoding-challenge-2021/584/week-1-february-1st-february-7th/3630/discuss/1051967/Binary-Tree-Right-Side-View-or-Level-Order-Traversal-or-C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    struct NodeLevel{
        TreeNode* node;
        int level;
        
        NodeLevel(TreeNode* n,int l): node(n),level(l) {}
    };
    
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        
        if(root==NULL){
            return res;
        }
        
        queue<NodeLevel> level_order;
        level_order.push(NodeLevel(root,0));
        int curr_level=-1;
        
        while(!level_order.empty()){
            NodeLevel removed_obj=level_order.front();
            level_order.pop();
            
            if(curr_level!=removed_obj.level){
                res.push_back(removed_obj.node->val);
                curr_level=removed_obj.level;
            }
            
            if(removed_obj.node->right!=NULL){
                level_order.push(NodeLevel(removed_obj.node->right,curr_level+1));
            }
            if(removed_obj.node->left!=NULL){
                level_order.push(NodeLevel(removed_obj.node->left,curr_level+1));
            }
        }
        
        return res;
    }
};
