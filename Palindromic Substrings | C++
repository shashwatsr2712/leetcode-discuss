// Link: https://leetcode.com/explore/challenge/card/march-leetcoding-challenge-2021/591/week-4-march-22nd-march-28th/3686/discuss/1129692/Palindromic-Substrings-or-C++

class Solution {
public:
    int countSubstrings(string s) {
        int len=s.length();
        // Boolean table where index i,j tells if s[i...j] is palindrome
        vector<vector<bool>> palindrome_table(len,vector<bool>(len,false));
        
        // Initialize the table for i,i (always true) and i,i+1 (true if s[i]==s[i+1])
        for(int i=0;i<len;i++){
            palindrome_table[i][i]=true;
            if(i+1<len && s[i]==s[i+1]){
                palindrome_table[i][i+1]=true;
            }
        }
        // Fill the rest of the table -> i,j using i-1,j-1
        for(int l=3;l<=len;l++){
            for(int i=0;i+l<=len;i++){
                int j=i+l-1;
                palindrome_table[i][j]=palindrome_table[i+1][j-1] && (s[i]==s[j]);
            }
        }
        
        // Count number of trues in the table
        int count=0;
        for(int i=0;i<len;i++){
            for(int j=i;j<len;j++){
                count=(palindrome_table[i][j]) ? count+1 : count;
            }
        }
        return count;
    }
};
