// Link: https://leetcode.com/explore/challenge/card/august-leetcoding-challenge/553/week-5-august-29th-august-31st/3443/discuss/821719/Delete-Node-in-BST-or-JAVA-solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // Get parent of a node
    public TreeNode findParOfVal(TreeNode t,TreeNode r){
        if(r==null || t==null){
            return null;
        }
        if(t==r){
            return null;
        }
        if(t.val>r.val){
            if(r.right==null){
                return null;
            }
            if(r.right.val==t.val){
                return r;
            }
            return findParOfVal(t,r.right);
        }      
        // t.val<r.val
        if(r.left==null){
            return null;
        }
        if(r.left.val==t.val){
            return r;
        }
        return findParOfVal(t,r.left);
    }
    
    public TreeNode findNode(TreeNode root,int key){
        if(root==null){
            return null;
        }
        if(root.val==key){
            return root;
        }
        if(key>root.val){
            return findNode(root.right,key);
        }
        return findNode(root.left,key);
    }
    
    // Find Inorder successor
    public TreeNode getInorderSucc(TreeNode x){
        if(x==null){
            return null;
        }
        TreeNode res=x.right;
        while(res.left!=null){
            res=res.left;
        }
        return res;
    }
    
    public TreeNode deleteNodeUtil(TreeNode root,TreeNode target,TreeNode par){
        // Delete root (no parent)
        if(par==null){
            if(target.left==null && target.right==null){
                return par;
            } else if(target.left==null){
                return target.right;
            } else if(target.right==null){
                return target.left;
            } else{
                TreeNode insucc=getInorderSucc(target);
                TreeNode par1=findParOfVal(insucc,root);
                int t=insucc.val;
                insucc.val=target.val;
                target.val=t;
                insucc=deleteNodeUtil(root,insucc,par1);
                return target;
            }
        } else{
            if(target.left==null && target.right==null){
                if(par.left==target){
                    par.left=null;
                } else{
                    par.right=null;
                }
            } else if(target.left==null){
                if(par.left==target){
                    par.left=target.right;
                } else{
                    par.right=target.right;
                }
            } else if(target.right==null){
                if(par.left==target){
                    par.left=target.left;
                } else{
                    par.right=target.left;
                }
            } else{
                TreeNode insucc=getInorderSucc(target);
                TreeNode par1=findParOfVal(insucc,root);
                int t=insucc.val;
                insucc.val=target.val;
                target.val=t;
                insucc=deleteNodeUtil(root,insucc,par1);
            }
            return root;
        }
    }
    
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode target=findNode(root,key);
        if(root==null || target==null){
            return root;
        }
        TreeNode par=findParOfVal(target,root); // Get parent of node to be deleted
        return deleteNodeUtil(root,target,par);
    }
}
