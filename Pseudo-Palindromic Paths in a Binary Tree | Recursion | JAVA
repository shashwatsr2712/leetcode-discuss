// Link: https://leetcode.com/explore/challenge/card/december-leetcoding-challenge/573/week-5-december-29th-december-31st/3585/discuss/991921/Pseudo-Palindromic-Paths-in-a-Binary-Tree-or-Recursion-or-JAVA

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count;  // Number of pseudo-palindromic path sequences
    
    // A sequence is pseudo-palindrome iff the frequency of at most one value is odd
    public boolean isPseudoPalindrome(List<Integer> lst){
        int freq[]=new int[10];
        Arrays.fill(freq,0);
        for(int i=0;i<lst.size();i++){
            freq[lst.get(i)]+=1;
        }
        int odd_count=0;
        for(int i=1;i<10;i++){
            if(freq[i]%2==0){
                continue;
            }
            odd_count+=1;
            if(odd_count>1){
                return false;
            }
        }
        return true;
    }
    
    // Create path and check if it is pseudo palindrome
    // 'temp' stores the path currently being formed
    public void getPathsAndCheck(List<Integer> temp,TreeNode root){
        temp.add(root.val);
        if(root.left==null && root.right==null){    // Leaf node found => path complete => check if pseudo palindrome
            if(isPseudoPalindrome(temp)){
                count+=1;
            }
            temp.remove(temp.size()-1);
            return;
        }
        
        if(root.left==null){
            getPathsAndCheck(temp,root.right);
        } else{
            getPathsAndCheck(temp,root.left);
            if(root.right!=null){
                getPathsAndCheck(temp,root.right);
            }
        }
        temp.remove(temp.size()-1);
    }
    
    public int pseudoPalindromicPaths (TreeNode root) {
        count=0;
        if(root==null){
            return count;
        }
        getPathsAndCheck(new ArrayList<Integer>(),root);
        return count;
    }
}
